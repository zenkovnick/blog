<?php

/**
 * BasePosts
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $category_id
 * @property string $title
 * @property string $short_text
 * @property string $full_text
 * @property string $thumb
 * @property Categories $Categories
 * @property Doctrine_Collection $Tags
 * @property Doctrine_Collection $PostsTags
 * @property Doctrine_Collection $CommentsPost
 * 
 * @method integer             getCategoryId()   Returns the current record's "category_id" value
 * @method string              getTitle()        Returns the current record's "title" value
 * @method string              getShortText()    Returns the current record's "short_text" value
 * @method string              getFullText()     Returns the current record's "full_text" value
 * @method string              getThumb()        Returns the current record's "thumb" value
 * @method Categories          getCategories()   Returns the current record's "Categories" value
 * @method Doctrine_Collection getTags()         Returns the current record's "Tags" collection
 * @method Doctrine_Collection getPostsTags()    Returns the current record's "PostsTags" collection
 * @method Doctrine_Collection getCommentsPost() Returns the current record's "CommentsPost" collection
 * @method Posts               setCategoryId()   Sets the current record's "category_id" value
 * @method Posts               setTitle()        Sets the current record's "title" value
 * @method Posts               setShortText()    Sets the current record's "short_text" value
 * @method Posts               setFullText()     Sets the current record's "full_text" value
 * @method Posts               setThumb()        Sets the current record's "thumb" value
 * @method Posts               setCategories()   Sets the current record's "Categories" value
 * @method Posts               setTags()         Sets the current record's "Tags" collection
 * @method Posts               setPostsTags()    Sets the current record's "PostsTags" collection
 * @method Posts               setCommentsPost() Sets the current record's "CommentsPost" collection
 * 
 * @package    blog
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePosts extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('posts');
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('title', 'string', 60, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 60,
             ));
        $this->hasColumn('short_text', 'string', 500, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 500,
             ));
        $this->hasColumn('full_text', 'string', 10000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 10000,
             ));
        $this->hasColumn('thumb', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));

        $this->option('charset', 'utf8');
        $this->option('collate', 'utf8_general_ci');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Categories', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Tags', array(
             'refClass' => 'PostsTags',
             'local' => 'posts_id',
             'foreign' => 'tags_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('PostsTags', array(
             'local' => 'id',
             'foreign' => 'posts_id'));

        $this->hasMany('Comments as CommentsPost', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'unique' => true,
             'fields' => 
             array(
              0 => 'title',
             ),
             'canUpdate' => true,
             'builder' => 
             array(
              0 => 'slugifyClass',
              1 => 'Slugify',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}